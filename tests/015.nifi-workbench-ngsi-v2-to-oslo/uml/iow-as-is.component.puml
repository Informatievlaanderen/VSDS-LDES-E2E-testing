@startuml "IoW Use Case AS-IS - Component Diagram"
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title IoW Use Case AS-IS - Component Diagram

Person(tester, "Tester")

System_Ext(generator, "JSON Data Generator", "Simple generator creating\n**WaterQualityObserved** updates (NGSI-v2 format)")
System_Boundary(nifi, "Apache NiFi system") {
    Container_Boundary(workflow_devices, "IoW Workflow Devices"){
         Component(listener_d, "ListenHTTP", "Java - standard NiFI processor", "Receives NGSI-v2 updates for Device")
         Component(translator_d, "NGSI v2 to LD translation", "Java - **custom** NiFI processor", "Translates NGSI-v2 to NGSI-LD according to Fiware rules")
         Component(creator_d, "LDES member creator", "Java - **custom** NiFI processor", "Produces LDES member (version object) from NGSI-LD")
         Component(sender_d, "InvokeHTTP", "Java - standard NiFI processor", "Sends LDES member to LDES server")
    }
    Container_Boundary(workflow_models, "IoW Workflow Models"){
         Component(listener_m, "ListenHTTP", "Java - standard NiFI processor", "Receives NGSI-v2 updates for DeviceModel")
         Component(translator_m, "NGSI v2 to LD translation", "Java - **custom** NiFI processor", "Translates NGSI-v2 to NGSI-LD according to Fiware rules")
         Component(creator_m, "LDES member creator", "Java - **custom** NiFI processor", "Produces LDES member (version object) from NGSI-LD")
         Component(sender_m, "InvokeHTTP", "Java - standard NiFI processor", "Sends LDES member to LDES server")
    }
    Container_Boundary(workflow_observations, "IoW Workflow Observations"){
         Component(listener_o, "ListenHTTP", "Java - standard NiFI processor", "Receives NGSI-v2 updates for WaterQualityObserved")
         Component(translator_o, "NGSI v2 to LD translation", "Java - **custom** NiFI processor", "Translates NGSI-v2 to NGSI-LD according to Fiware rules")
         Component(oslo_o, "OSLO translation", "Java - standard NiFI processor with **custom** mapping", "Translates NGSI-LD to OSLO model")
         Component(creator_o, "LDES member creator", "Java - **custom** NiFI processor", "Produces LDES member (version object) from OSLO model")
         Component(sender_o, "InvokeHTTP", "Java - standard NiFI processor", "Sends LDES member to LDES server")
    }
}
System(server_observations, "LDES Server Observations", "LDES Server ingesting & serving **WaterQualityObserved**")
System(server_devices, "LDES Server Devices", "LDES Server ingesting & serving **Devices**")
System(server_models, "LDES Server Models", "LDES Server ingesting & serving **DeviceModels**")
System_Ext(database, "Storage", "MongoDB - Contains LDES members and fragments")

Rel_D(tester, listener_d, "pushes Devices", "HTTPS")
Rel_D(listener_d, translator_d, "NGSI-v2")
Rel_D(translator_d, creator_d, "NGSI-LD")
Rel_D(creator_d, sender_d, "LDES member (JSON-LD)")

Rel_D(tester, listener_m, "pushes DeviceModels", "HTTPS")
Rel_D(listener_m, translator_m, "NGSI-v2")
Rel_D(translator_m, creator_m, "NGSI-LD")
Rel_D(creator_m, sender_m, "LDES member (JSON-LD)")

Rel_D(generator, listener_o, "generates and pushes NGSI-v2 updates", "HTTP (method POST)")
Rel_D(listener_o, translator_o, "NGSI-v2")
Rel_R(translator_o, oslo_o, "NGSI-LD")
Rel_D(oslo_o, creator_o, "NGSI-LD")
Rel_D(creator_o, sender_o, "LDES member (JSON-LD)")

Rel_D(sender_o, server_observations, "pushes LDES members", "HTTP (method POST)")
Rel_D(sender_m, server_models, "pushes LDES members", "HTTP (method POST)")
Rel_D(sender_d, server_devices, "pushes LDES members", "HTTP (method POST)")

Rel_D(server_observations, database, "stores and retrieves LDES members", "mongo")
Rel_D(server_models, database, "stores and retrieves LDES members", "mongo")
Rel_D(server_devices, database, "stores and retrieves LDES members", "mongo")

@enduml
