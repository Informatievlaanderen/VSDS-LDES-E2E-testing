services:

  test-message-generator:
    container_name: ${USECASE_NAME:-ldes-oauth-client}_test-message-generator
    image: ghcr.io/informatievlaanderen/test-message-generator:${TEST_MESSAGE_GENERATOR_TAG:-latest}
    environment:
      - TARGETURL=http://ldio-server-seeder:8080/seed-server
      - SILENT=false
      - CRON=* * * * * *
      - TEMPLATEFILE=/tmp/data/device.template.json
      - MIMETYPE=application/ld+json
    volumes:
      - ./data/device.template.json:/tmp/data/device.template.json:ro
    networks:
      - ldes
    profiles:
      - delay-started

  ldio-server-seeder:
    image: ${LDI_ORCHESTRATOR:-ghcr.io/informatievlaanderen/ldi-orchestrator}:${LDI_ORCHESTRATOR_TAG:-latest}
    container_name: ${USECASE_NAME:-ldes-oauth-client}_ldio-server-seeder
    volumes:
      - ./ldio-server-seeder.yml:/ldio/config/application.yml:ro
    networks:
      - ldes
    depends_on:
      - ldes-server

  ldes-server:
    container_name: ${USECASE_NAME:-ldes-oauth-client}_ldes-server
    image: ${LDES_SERVER:-ghcr.io/informatievlaanderen/ldes-server}:${LDES_SERVER_TAG:-latest}
    environment:
      - SIS_DATA=/tmp
      - MANAGEMENT_TRACING_ENABLED=false
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health
      - SERVER_PORT=8080
      - LDESSERVER_HOSTNAME=http://localhost:8080
      - SPRING_DATASOURCE_URL=jdbc:postgresql://ldes-postgres:5432/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PWD}
      - SPRING_BATCH_JDBC_INITIALIZESCHEMA=always
    volumes:
      - ./config/ldes-server.config.yml:/application.yml:ro
      - ../../data/epsg:/tmp/Databases:rw
    networks:
      - ldes
    ports:
      - 8082:8080 # needed for admin API
    depends_on:
      - ldes-postgres
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://ldes-server:8080/actuator/health"]
      interval: 12s
      timeout: 3s
      retries: 20

  ldes-mongodb:
    container_name: ${USECASE_NAME:-ldes-oauth-client}_ldes-mongodb
    image: mongo:${MONGODB_TAG:-latest}
    ports:
      - 27017:27017
    networks:
      - ldes

  ldes-postgres:
    container_name: ldes-postgres
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PWD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - ldes

  postgrest:
    container_name: postgres-rest-api
    image: postgrest/postgrest:latest
    ports:
      - 9018:3000
    environment:
      - PGRST_DB_URI=postgres://${POSTGRES_USER}:${POSTGRES_PWD}@ldes-postgres:5432/${POSTGRES_DB}
      - PGRST_DB_ANON_ROLE=${POSTGRES_USER}
      - PGRST_OPENAPI_SERVER_PROXY_URI=http://localhost:9018
    depends_on:
      - ldes-postgres
    networks:
      - ldes

  ldio-workbench:
    image: ${LDI_ORCHESTRATOR:-ghcr.io/informatievlaanderen/ldi-orchestrator}:${LDI_ORCHESTRATOR_TAG:-latest}
    container_name: ${USECASE_NAME:-ldes-oauth-client}_ldio-workbench
    volumes:
      - ./ldio-oauth-ldes-client.yml:/ldio/config/application.yml:ro
    environment:
      - SERVER_PORT=8081
    # Use the network stack of the nginx service so that localhost refers to the nginx api gateway
    # so that we can follow the LDES stream.
    network_mode: service:api-gateway
    depends_on:
      - test-message-sink
      - mock-oauth2-server
      - api-gateway
    profiles:
      - delay-started

  api-gateway:
    image: nginx:${NGINX_TAG:-stable}
    container_name: ${USECASE_NAME:-ldes-oauth-client}_nginx
    ports:
      - 8080:8080
      - 8443:8443
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./fwd-ldes-server.conf:/etc/nginx/conf.d/fwd-ldes-server.conf:ro
      - ./oauth2.js:/etc/nginx/oauth2.js:ro
    networks:
      - ldes
    depends_on:
      - ldes-server
      - mock-oauth2-server

  mock-oauth2-server:
    image: ghcr.io/navikt/mock-oauth2-server:1.0.0
    container_name: ${USECASE_NAME:-ldes-oauth-client}_mock-oauth2-server
    environment:
      - BASEURL=http://mock-oauth2-server
    ports:
      - ${OAUTH2_SERVER_PORT:-8090}:8080
    networks:
      - ldes

  test-message-sink:
    image: ghcr.io/informatievlaanderen/test-message-sink:${TEST_MESSAGE_SINK_TAG:-latest}
    container_name: ${USECASE_NAME:-ldes-oauth-client}_test-message-sink
    environment:
      - SILENT=false
      - MEMORY=false
      - CONNECTION_URI=mongodb://ldes-mongodb:27017
      - DATABASE_NAME=iow_sink
      - COLLECTION_NAME=devices
      - MEMBER_TYPE=https://uri.etsi.org/ngsi-ld/default-context/Device
    ports:
      - ${TEST_MESSAGE_SINK_PORT:-9003}:80
    networks:
      - ldes
    depends_on:
      - ldes-mongodb

networks:
  ldes:
    name: ${USECASE_NAME:-ldes-oauth-client}_network
