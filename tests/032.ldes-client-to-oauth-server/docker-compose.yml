networks:
  ldes:
    name: ldes-oauth-client_network


services:

  test-message-generator:
    container_name: ldes-oauth-client_test-message-generator
    image: ghcr.io/informatievlaanderen/test-message-generator:${TEST_MESSAGE_GENERATOR_TAG:-latest}
    environment:
      - TARGETURL=http://ldio-server-seeder/seed-server
      - SILENT=false
      - CRON=* * * * * *
      - TEMPLATEFILE=/tmp/data/device.template.json
      - MIMETYPE=application/ld+json
    volumes:
      - ./generator/device.template.json:/tmp/data/device.template.json:ro
    networks:
      - ldes
    profiles:
      - delay-started


  # TODO: remove seeder, seed server directly and create versions in the server
  ldio-server-seeder:
    container_name: ldes-oauth-client_ldio-server-seeder
    image: ${LDI_ORCHESTRATOR:-ghcr.io/informatievlaanderen/ldi-orchestrator}:${LDI_ORCHESTRATOR_TAG:-latest}
    environment:
      - SERVER_PORT=80
    volumes:
      - ./seeder/config.yml:/ldio/config/application.yml:ro
    networks:
      - ldes
    depends_on:
      - ldes-server


  ldes-server:
    container_name: ldes-oauth-client_ldes-server
    image: ${LDES_SERVER:-ghcr.io/informatievlaanderen/ldes-server}:${LDES_SERVER_TAG:-latest}
    environment:
      - SIS_DATA=/tmp
      - MANAGEMENT_TRACING_ENABLED=false
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info
      - SERVER_PORT=8080
      - LDESSERVER_HOSTNAME=http://localhost:8080
      - SPRING_DATASOURCE_URL=jdbc:postgresql://ldes-postgres:5432/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PWD}
      - SPRING_BATCH_JDBC_INITIALIZESCHEMA=always
    volumes:
      - ./server/config.yml:/application.yml:ro
      - ../../data/epsg:/tmp/Databases:rw
    networks:
      - ldes
    ports:
      - 8082:8080 # needed for admin API
    depends_on:
      - ldes-postgres
    healthcheck:
      test: wget -qO- http://ldes-server:8080/actuator/health
      interval: 12s
      timeout: 3s
      retries: 20


  ldes-postgres:
    container_name: ldes-oauth-client_ldes-postgres
    image: postgres:14-alpine
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PWD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - ldes


  postgrest:
    container_name: ldes-oauth-client_postgres-rest-api
    image: vsds/postgrest:latest
    build:
      dockerfile_inline: |
        FROM alpine:latest
        COPY --from=postgrest/postgrest /bin/postgrest /bin
        RUN apk update && apk upgrade
        RUN apk add curl
        EXPOSE 3000
        USER 1000
        CMD [ "/bin/postgrest" ]
    ports:
      - 9018:3000
    environment:
      - PGRST_DB_URI=postgres://${POSTGRES_USER}:${POSTGRES_PWD}@ldes-postgres:5432/${POSTGRES_DB}
      - PGRST_DB_ANON_ROLE=${POSTGRES_USER}
      - PGRST_OPENAPI_SERVER_PROXY_URI=http://localhost:9018
    depends_on:
      - ldes-postgres
    networks:
      - ldes
    healthcheck:
      start_period: 15s
      test: 'curl -s -f -I http://postgrest:3000'
      interval: 3s
      timeout: 3s
      retries: 5


  mock-oauth2-server:
    image: ghcr.io/navikt/mock-oauth2-server:1.0.0
    container_name: ldes-oauth-client_mock-oauth2-server
    environment:
      - BASEURL=http://mock-oauth2-server
    ports:
      - 8090:8080
    networks:
      - ldes


  api-gateway:
    image: nginx:${NGINX_TAG:-stable}
    container_name: ldes-oauth-client_nginx
    ports:
      - 8080:8080
      - 8443:8443
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./gateway/fwd-ldes-server.conf:/etc/nginx/conf.d/fwd-ldes-server.conf:ro
      - ./gateway/oauth2.js:/etc/nginx/oauth2.js:ro
    networks:
      - ldes
    depends_on:
      - ldes-server
      - mock-oauth2-server


  ldio-workbench:
    image: ${LDI_ORCHESTRATOR:-ghcr.io/informatievlaanderen/ldi-orchestrator}:${LDI_ORCHESTRATOR_TAG:-latest}
    container_name: ldes-oauth-client_ldio-workbench
    volumes:
      - ./ldio-oauth-ldes-client.yml:/ldio/config/application.yml:ro
    environment:
      - SERVER_PORT=8081
    # Use the network stack of the nginx service so that localhost refers to the nginx api gateway
    # so that we can follow the LDES stream.
    network_mode: service:api-gateway
    depends_on:
      - test-message-sink
      - mock-oauth2-server
      - api-gateway
    healthcheck:
      start_period: 15s
      test: wget -qO- http://ldio-workbench:8081/actuator/health
      interval: 3s
      timeout: 3s
      retries: 5


  test-message-sink:
    container_name: ldes-oauth-client_test-message-sink
    image: ghcr.io/informatievlaanderen/test-message-sink:${TEST_MESSAGE_SINK_TAG:-latest}
    environment:
      - SILENT=false
      - MEMORY=false
      - CONNECTION_URI=mongodb://ldes-mongodb:27017
      - DATABASE_NAME=iow_sink
      - COLLECTION_NAME=devices
      - MEMBER_TYPE=https://uri.etsi.org/ngsi-ld/default-context/Device
    ports:
      - 9003:80
    networks:
      - ldes
    depends_on:
      - ldes-mongodb
    healthcheck:
      start_period: 15s
      test: curl -f -s http://test-message-sink
      interval: 3s
      timeout: 3s
      retries: 5


  ldes-mongodb:
    container_name: ldes-oauth-client_ldes-mongodb
    image: mongo:${MONGODB_TAG:-latest}
    ports:
      - 27017:27017
    networks:
      - ldes
    healthcheck:
      start_period: 15s
      test: echo 'db.runCommand("ping").ok' | mongosh ldes-mongodb:27017/test --quiet
      interval: 3s
      timeout: 3s
      retries: 5
